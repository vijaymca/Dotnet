//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;
using System.Xml.XPath;
using Shell.SharePoint.DREAM.Utilities;
using Shell.SharePoint.DREAM.CustomSOAPHeader;

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 

namespace Shell.SharePoint.DWB.BusinessLogicLayer
{
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "PDFServiceSoap", Namespace = "http://shell.com/")]
    public partial class PDFServiceProxy : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback GeneratePDFOperationCompleted;

        private System.Threading.SendOrPostCallback ReturnResultsOperationCompleted;

        /// <remarks/>
        public PDFServiceProxy()
        {
              this.Url = "http://localhost:1000/PDFService/PDFService.asmx";
           // this.Url = PortalConfiguration.GetInstance().GetKey("PDFServiceURL");
        }

        /// <remarks/>
    public PDFServiceProxy(string siteURL)
    {
        this.Url = PortalConfiguration.GetInstance().GetKey("PDFServiceURL", siteURL);
    }
        /// <remarks/>
        public event GeneratePDFCompletedEventHandler GeneratePDFCompleted;

        /// <remarks/>
        public event ReturnResultsCompletedEventHandler ReturnResultsCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://shell.com/GeneratePDF", RequestNamespace = "http://shell.com/", ResponseNamespace = "http://shell.com/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GeneratePDF(System.Xml.XmlElement xmlElement, string strContext)
        {
            this.Timeout = System.Threading.Timeout.Infinite;
            object[] results = this.Invoke("GeneratePDF", new object[] {
                    xmlElement,
                    strContext});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGeneratePDF(System.Xml.XmlElement xmlElement, string strContext, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GeneratePDF", new object[] {
                    xmlElement,
                    strContext}, callback, asyncState);
        }

        /// <remarks/>
        public int EndGeneratePDF(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void GeneratePDFAsync(System.Xml.XmlElement xmlElement, string strContext)
        {
            this.GeneratePDFAsync(xmlElement, strContext, null);
        }

        /// <remarks/>
        public void GeneratePDFAsync(System.Xml.XmlElement xmlElement, string strContext, object userState)
        {
            if ((this.GeneratePDFOperationCompleted == null))
            {
                this.GeneratePDFOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGeneratePDFOperationCompleted);
            }
            this.InvokeAsync("GeneratePDF", new object[] {
                    xmlElement,
                    strContext}, this.GeneratePDFOperationCompleted, userState);
        }

        private void OnGeneratePDFOperationCompleted(object arg)
        {
            if ((this.GeneratePDFCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GeneratePDFCompleted(this, new GeneratePDFCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://shell.com/ReturnResults", RequestNamespace = "http://shell.com/", ResponseNamespace = "http://shell.com/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ReturnResults()
        {
            object[] results = this.Invoke("ReturnResults", new object[0]);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginReturnResults(System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ReturnResults", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public string EndReturnResults(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void ReturnResultsAsync()
        {
            this.ReturnResultsAsync(null);
        }

        /// <remarks/>
        public void ReturnResultsAsync(object userState)
        {
            if ((this.ReturnResultsOperationCompleted == null))
            {
                this.ReturnResultsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReturnResultsOperationCompleted);
            }
            this.InvokeAsync("ReturnResults", new object[0], this.ReturnResultsOperationCompleted, userState);
        }

        private void OnReturnResultsOperationCompleted(object arg)
        {
            if ((this.ReturnResultsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReturnResultsCompleted(this, new ReturnResultsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GeneratePDFCompletedEventHandler(object sender, GeneratePDFCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GeneratePDFCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GeneratePDFCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ReturnResultsCompletedEventHandler(object sender, ReturnResultsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReturnResultsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ReturnResultsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}